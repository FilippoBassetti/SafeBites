openapi: 3.0.0
info:
  version: 1.0.0
  title: "SafeBites OpenAPI 3.0"
  description: API for managing and researching restaurants
  license:
    name: MIT
servers:
  # Added by API Auto Mocking Plugin
  - url: https://virtserver.swaggerhub.com/filippo.bassetti/SafeBitesApi/1.0.0
    description: SwaggerHub API Auto Mocking
  - url: http://localhost:8000/api/v1
    description: Localhost

paths:
  /restaurants:
    get:
      summary: View all restaurants or filter by categories
      description: Gets the list of all restaurants or filters them by category using a query string.
      parameters:
        - name: categories
          in: query
          description: List of categories to filter restaurants by.
          required: false
          schema:
            type: array
            items:
              type: string
      responses:
        "200":
          description: A collection of restaurants (filtered by category if provided).
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Restaurant'
        "404":
          description: No restaurants found for the specified category.
    post:
      summary: Register a new restaurant
      description: Creates a new restaurant in the system.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Restaurant'
      responses:
        "201":
          description: Restaurant created. The Location header contains a link to the newly created restaurant.
          headers:
            Location:
              description: Link to the newly created restaurant.
              schema:
                type: string

  /restaurants/{id}:
    get:
      summary: Get restaurant by ID
      description: Retrieves the restaurant with the specified ID.
      parameters:
        - name: id
          in: path
          required: true
          description: The unique ID of the restaurant.
          schema:
            type: string
      responses:
        "200":
          description: Restaurant found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Restaurant'
        "404":
          description: No restaurant found with the specified ID.
    put:
      summary: Update a restaurant by ID
      description: Updates the details of the specified restaurant.
      parameters:
        - in: path
          name: id
          required: true
          description: The unique ID of the restaurant to update.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Restaurant'
      responses:
        "200":
          description: Restaurant updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Restaurant'
        "404":
          description: Restaurant not found.
        "400":
          description: Invalid input.
    delete:
      summary: Delete a restaurant by ID
      description: Removes the specified restaurant from the system.
      parameters:
        - in: path
          name: id
          required: true
          description: The unique ID of the restaurant to delete.
          schema:
            type: string
      responses:
        "204":
          description: Restaurant deleted successfully (No Content).
        "404":
          description: Restaurant not found.

  /restaurants/by-user/{user_id}:
    get:
      summary: Get restaurant by user ID
      description: Gets the restaurant associated with the specified user ID.
      parameters:
        - name: user_id
          in: path
          required: true
          description: The unique ID of the user.
          schema:
            type: string
      responses:
        "200":
          description: Restaurant found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Restaurant'
        "404":
          description: No restaurant found for the specified user ID.

  /users:
    post:
      summary: Create a new user
      description: Creates a new user in the system.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        "201":
          description: User created successfully.
          headers:
            Location:
              description: URL to access the newly created user.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        "400":
          description: Invalid input.

  /users/{id}:
    get:
      summary: Get a user by ID
      description: Retrieves details of the specified user.
      parameters:
        - in: path
          name: id
          required: true
          description: The unique ID of the user.
          schema:
            type: string
      responses:
        "200":
          description: User details retrieved successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        "404":
          description: User not found.
    put:
      summary: Update a user by ID
      description: Updates the details of the specified user.
      parameters:
        - in: path
          name: id
          required: true
          description: The unique ID of the user to update.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        "200":
          description: User updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        "404":
          description: User not found.
        "400":
          description: Invalid input.
    delete:
      summary: Delete a user by ID
      description: Removes the specified user from the system.
      parameters:
        - in: path
          name: id
          required: true
          description: The unique ID of the user to delete.
          schema:
            type: string
      responses:
        "204":
          description: User deleted successfully (No Content).
        "404":
          description: User not found.
  /rating/{rest_id}:
    get:
      summary: View all ratings for a restaurant
      description: Retrieves a list of all ratings for the specified restaurant. Optionally, filter by the user who left the rating.
      parameters:
        - name: rest_id
          in: path
          required: true
          description: The ID of the rated restaurant.
          schema:
            type: string
        - name: user_id
          in: query
          required: false
          description: The ID of the user who left the rating.
          schema:
            type: string
      responses:
        "200":
          description: A collection of ratings (filtered by restaurant and user if provided).
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Rating'
        "404":
          description: No ratings found for the specified restaurant.
    put:
      summary: Update a rating for a restaurant by a user
      description: Updates the rating for the specified restaurant made by the user.
      parameters:
        - name: rest_id
          in: path
          required: true
          description: The ID of the rated restaurant.
          schema:
            type: string
        - name: user_id
          in: query
          required: true
          description: The ID of the user who left the rating.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Rating'
      responses:
        "200":
          description: Rating updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Rating'
        "404":
          description: Rating not found.
        "400":
          description: Invalid input.
    delete:
      summary: Delete a rating for a restaurant by a user
      description: Deletes the rating for the specified restaurant made by the user.
      parameters:
        - name: rest_id
          in: path
          required: true
          description: The ID of the rated restaurant.
          schema:
            type: string
        - name: user_id
          in: query
          required: true
          description: The ID of the user who left the rating.
          schema:
            type: string
      responses:
        "204":
          description: Rating deleted successfully (No Content).
        "404":
          description: No matching rating found for the specified restaurant and user.

  /rating:
    post:
      summary: Create a rating for a restaurant
      description: Creates a new rating for a restaurant by a user.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Rating'
      responses:
        "201":
          description: Rating created. The Location header contains a link to the newly created rating.
          headers:
            Location:
              description: Link to the newly created rating.
              schema:
                type: string
                
  /review/{rest_id}:
    get:
      summary: View all reviews for a restaurant
      description: Retrieves a list of all reviews for the specified restaurant.
      parameters:
        - name: rest_id
          in: path
          required: true
          description: The ID of the reviewed restaurant.
          schema:
            type: string
        - name: user_id
          in: query
          required: false
          description: The ID of the user who left the review.
          schema:
            type: string
      responses:
        "200":
          description: A collection of reviews (filtered by restaurant and user if provided).
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Review'
        "404":
          description: No reviews found for the specified restaurant.
    put:
      summary: Update a review for a restaurant by a user
      description: Updates a review for the specified restaurant made by the user.
      parameters:
        - name: rest_id
          in: path
          required: true
          description: The ID of the reviewed restaurant.
          schema:
            type: string
        - name: user_id
          in: query
          required: true
          description: The ID of the user who left the review.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Review'
      responses:
        "200":
          description: Review updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Review'
        "404":
          description: Review not found.
        "400":
          description: Invalid input.
    delete:
      summary: Delete a review for a restaurant by a user
      description: Deletes the review for the specified restaurant made by the user.
      parameters:
        - name: rest_id
          in: path
          required: true
          description: The ID of the reviewed restaurant.
          schema:
            type: string
        - name: user_id
          in: query
          required: true
          description: The ID of the user who left the review.
          schema:
            type: string
      responses:
        "204":
          description: Review deleted successfully (No Content).
        "404":
          description: No matching review found for the specified restaurant and user.

  /review:
    post:
      summary: Create a review for a restaurant
      description: Creates a new review for a restaurant by a user.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Review'
      responses:
        "201":
          description: Review created. The Location header contains a link to the newly created review.
          headers:
            Location:
              description: Link to the newly created review.
              schema:
                type: string

components:
  schemas:
    User:
      type: object
      required:
        - id
        - email
        - password
        - user_name
        - name
        - family_name
        - user_type
      properties:
        id:
          type: string
          description: "ID of the user."
        email:
          type: string
          description: "Email address of the user."
        password:
          type: string
          description: "User password for login."
        user_name:
          type: string
          description: "Username."
        name:
          type: string
          description: "First name of the user."
        family_name:
          type: string
          description: "Family name of the user."
        user_type:
          type: boolean
          description: "Whether the user is a restaurant (true) or a normal user (false)."
        
    Restaurant:
      type: object
      required:
        - id
        - user_id
        - email
        - name
        - address
        - category
        - rating
        - price
        - opening_hours
        - opening_days
        - dishes
        - profile_url
      properties:
        id:
          type: string
          description: "ID of the restaurant (string for MongoDB compatibility)."
        user_id:
          type: string
          description: "The ID of the user associated with the restaurant for authentication."
        email:
          type: string
          description: "Email address of the restaurant."
        name:
          type: string
          description: "Name of the restaurant."
        address:
          type: string
          description: "Address of the restaurant."
        category:
          type: array
          items:
            type: string
          description: "A list of categories that describe the type of restaurant."
        rating:
          type: number
          description: "Rating of the restaurant."
          minimum: 0
          maximum: 5
        price:
          type: string
          description: "Price range of the restaurant."
        opening_hours:
          type: array
          description: "A list of opening hour time ranges. Each time range is an array with two integers [open, close]."
          items:
            type: array
            items:
              type: integer
            minItems: 2
            maxItems: 2
        opening_days:
          type: array
          description: "A list of booleans indicating whether the restaurant is open on each day of the week."
          items:
            type: boolean
          minItems: 7
          maxItems: 7
        dishes:
          type: array
          items:
            type: string
          description: "A list of dishes offered by the restaurant."
        profile_url:
          type: string
          description: "URL of the restaurant profile picture for frontend."
          
    Rating:
      type: object
      required:
        - rest_id
        - user_id
        - rating
      properties:
        rest_id:
          type: string
          description: "ID of the rated restaurant."
        user_id:
          type: string
          description: "ID of the user that left the rating."
        rating:
          type: integer
          description: "Rating given by the user."
          minimum: 0
          maximum: 5
          
    Review:
      type: object
      required:
        - rest_id
        - user_id
        - text
      properties:
        rest_id:
          type: string
          description: "ID of the reviewed restaurant."
        user_id:
          type: string
          description: "ID of the user who left the review."
        text:
          type: string
          description: "Text of the review."
