openapi: 3.0.0
info:
  version: 1.0.0
  title: "SafeBites OpenAPI 3.0"
  description: APi for managing and research of resturants
  license:
    name: MIT
servers:
  # Added by API Auto Mocking Plugin
  - url: https://virtserver.swaggerhub.com/filippo.bassetti/SafeBitesApi/1.0.0
    description: SwaggerHub API Auto Mocking
  - url: http://localhost:8000/api/v1
    description: Localhost


paths:
  /restaurants:
    get:
      summary: View all restaurants or filter by categories
      description: Gets the list of all restaurants or filters them by category using a query string.
      parameters:
        - name: categories
          in: query
          description: List of categories to filter restaurants by.
          required: false
          schema:
            type: array
            items:
              type: string
      responses:
        "200":
          description: Collection of restaurants (filtered by category if provided)
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Restaurant'
        "404":
          description: No restaurants found for the specified category.
    post:
      summary: Register a new restaurant
      description: Creates a new restaurant in the system.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Restaurant'
      responses:
        "201":
          description: Restaurant created. Link in the Location header
          headers:
            Location:
              description: Link to the newly created restaurant.
              schema:
                type: string
    
  /restaurants/{id}:
    get:
      summary: Get restaurant by ID
      description: Gets the restaurant with a specific ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: restaurant
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Restaurant'
        "404":
          description: No restaurants found with the specific name.
    put:
      summary: Update a restaurant by ID
      description: Updates the details of a specific restaurant by their ID.
      parameters:
        - in: path
          name: id
          required: true
          description: The unique ID of the restaurant to update.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Restaurant'
      responses:
        "200":
          description: restaurant updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Restaurant'
        "404":
          description: Restaurant not found.
        "400":
          description: Invalid input.
    delete:
      summary: Delete a restaurant by ID
      description: Removes a specific restaurant from the system.
      parameters:
        - in: path
          name: id
          required: true
          description: The unique ID of the restaurant to delete.
          schema:
            type: string
      responses:
        "204":
          description: Restaurant deleted successfully (No Content).
        "404":
          description: Restaurant not found.
  /restaurants/by-user/{user_id}:
    get:
      summary: get a restaurant by user_id
      description: Gets the restaurant with of specific user with the user_id
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: restaurant
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Restaurant'
        "404":
          description: No restaurants found with the specific name.
  /users:
    post:
      summary: Create a new user
      description: Creates a new user in the system.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        "201":
          description: User created successfully.
          headers:
            Location:
              description: URL to access the newly created user.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        "400":
          description: Invalid input.

  /users/{id}:
    get:
      summary: Get a user by ID
      description: Retrieves details of a specific user by their ID.
      parameters:
        - in: path
          name: id
          required: true
          description: The unique ID of the user.
          schema:
            type: string
      responses:
        "200":
          description: User details retrieved successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        "404":
          description: User not found.

    put:
      summary: Update a user by ID
      description: Updates the details of a specific user by their ID.
      parameters:
        - in: path
          name: id
          required: true
          description: The unique ID of the user to update.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        "200":
          description: User updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        "404":
          description: User not found.
        "400":
          description: Invalid input.
    delete:
      summary: Delete a user by ID
      description: Removes a specific user from the system.
      parameters:
        - in: path
          name: id
          required: true
          description: The unique ID of the user to delete.
          schema:
            type: string
      responses:
        "204":
          description: User deleted successfully (No Content).
        "404":
          description: User not found.
components:
  schemas:
    User:
      type: object
      required:
        - id
        - email
        - username
        - name
        - family_name
        - user_type
      properties:
        id:
          type: string
          description: 'ID of the user'
        email:
          type: string
          description: 'Email address of the user'
        username: 
          type: string
          description: 'username'
        name: 
          type: string
          description: 'name'
        family_name: 
          type: string
          description: 'family_name'
        user_type: 
          type: boolean
          description: 'Wheter the user is a restaurant or a normal user '
        
    Restaurant:
      type: object
      required:
        - id
        - user_id
        - email
        - name
        - address
        - category
        - rating
        - price
        - opening_hours
        - opening_days
        - dishes
        - profile_url
      properties:
        id:
          type: string
          description: 'ID of the restaurant (string for mongoDB compatibility)'
        user_id:
          type: string
          description: 'The id of the user associated to the restaurant for authentication'
        email:
          type: string
          description: 'Email address of the restaurant'
        name: 
          type: string
          description: 'Name of the restaurant'
        address: 
          type: string 
          description: 'Address of the restaurant'
        category: 
          type: array
          items:
            type: string
          description: 'A list of categories that describe the type of restaurant'
        rating: 
          type: number
          description: 'Rating of the restaurant'
          minimum: 0
          maximum: 5
        price: 
          type: string 
          description: 'Price range of the restaurant'
        opening_hours:
          type: array
          description: 'A list of all opening hours'
          items:
            type: array
            items:
              type: integer
            minItems: 2
            maxItems: 2
        opening_days: 
          type: array 
          description: 'A list of all days where it is open'
          items:
            type: boolean
            minItems: 7
            maxItems: 7
        dishes: 
          type: array
          items:
            type: string
          description: 'A list of dishes offered by the restaurant '
        profile_url:
          type: string
          description: ' Url of the Restaurant profile prictur for frontend'